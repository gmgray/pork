from docx import Document
from docx.enum.style import WD_STYLE_TYPE
from docx.shared import Pt,Cm
from datetime import datetime

class Version:
    def __init__(self,MINOR=1,MAJOR=0,EDITION=datetime.now().strftime("%Y%m%d%H%M%S")):
        self.MINOR   = MINOR
        self.MAJOR   = MAJOR
        self.EDITION = EDITION
    def __str__(self):
        return("%d.%03d.%s"%(self.MINOR, self.MAJOR, self.EDITION)) 

class Pork:
    
    def __init__(self,
            file        = "Pork_out.docx",
            title       = "Pork template",
            author      = "Three little pigs",
            comments    = "Created by Pork",
            category    = "Template",
            identifier  = "1.00",
            version     = Version(),
            keywords    = "example",
            subject     = "Autogenerated document",
            language    = 'EN',
            font_name   = 'Calibri',
            font_size   = 12,
            last_modified_by = 'Pork engine'
        ):

        self.file       = file
        self.title      = title
        self.author     = author
        self.comments   = comments
        self.category   = category
        self.identifier = identifier
        self.version    = version
        self.subject    = subject
        self.language   = language
        self.font_name  = font_name
        self.font_size  = font_size
        self.last_modified_by = last_modified_by
        self.doc        = None
        self.properties = None
        self._pointer   = None

    def create(self):
        """Initialize document"""
        self.doc                         = Document()
        self.properties                  = self.doc.core_properties
        self.properties.author           = self.author
        self.properties.comments         = self.comments
        self.properties.category         = self.category
        self.properties.identifier       = self.identifier
        self.properties.version          = self.version.__str__()
        self.properties.subject          = self.subject
        self.properties.language         = self.language
        self.properties.last_modified_by = self.last_modified_by
        self._pointer                    = self.doc
        _style = self.doc.styles['Normal']
        _font  = _style.font
        _font.name = self.font_name
        _font.size = Pt(self.font_size)


    def add_p(self,text="Lorem ipsum..."):
        """Adds and returns paragraph object."""
        self._pointer=self.doc.add_paragraph(text)
        return self._pointer

    def add_h(self,text="Header...",level=1,):
        """Adds and returns header object. Optional header level 1..6"""
        assert level in range(1,6), "level must be between 1 and 6"
        self._pointer=self.doc.add_heading(text,level=level)
        return self._pointer

    def add(self,text,bold=False,italic=False,underline=False,shadow=False,strike=False,subscript=False,superscript=False):
        """Adds text to current object (run) and returns it. 
        Possible stylings: bold, italic, underline, shadow, strike, subscript, superscript."""
        run=self._pointer.add_run(text)
        if  bold:
            run.bold        = True
        if italic:
            run.italic      = True
        if underline:
            run.underline   = True
        if shadow:
            run.shadow      = True
        if strike:
            run.strike      = True
        if subscript:
            run.subscript   = True
        if superscript:
            run.superscript = True
        return run

    def save(self):
        try:
            self.doc.save(self.file)
        except Exception as e:
            print("Couldn't save file: %s" %(e))
            return e


if __name__ == "__main__":
    doc=Pork()
    doc.file="MyPrettyFile.docx"
    doc.title="Pork test file"
    doc.version=Version(1,0)
    doc.create()
    doc.add_h("Biggest title.")
    doc.add_p("""Drogi Marszałku, Wysoka Izbo. PKB rośnie. Różnorakie i określenia kolejnych kroków w kształtowaniu odpowiednich warunków administracyjno-finansowych. Obywatelu, zawiązanie koalicji rozszerza nam efekt modelu rozwoju. Gdy za sobą proces wdrożenia i koledzy, inwestowanie w określaniu form oddziaływania. Tak samo istotne jest ważne zadanie w wypracowaniu istniejących kryteriów pomaga w większym stopniu tworzenie kolejnych kroków w przygotowaniu i koledzy, konsultacja z szerokim aktywem wymaga niezwykłej precyzji w restrukturyzacji przedsiębiorstwa. Podobnie, wzmocnienie i określenia form oddziaływania. Wszystko po kolei Każdy już zapewne zdążył zauważyć iż stałe zabezpieczenie informacyjne naszej działalności organizacyjnej wymaga sprecyzowania i unowocześniania postaw uczestników wobec zadań stanowionych przez organizację. Jak już zapewne zdążył zauważyć iż zakres i rozwijanie struktur umożliwia w większym stopniu tworzenie postaw uczestników wobec zadań programowych ukazuje nam efekt kierunków postępowego wychowania. Proszę państwa, nowy model działalności powoduje docenianie wag systemu spełnia ważne z powodu istniejących kryteriów ukazuje nam efekt postaw uczestników wobec zadań stanowionych przez organizację. Jak już mówiłem jasne jest to, że zakres i realizacji istniejących kryteriów przedstawia interpretującą próbę sprawdzenia dalszych kierunków rozwoju. W związku z powodu systemu powszechnego uczestnictwa. Podniosły się iż aktualna...""")
    doc.add_h("Subtitle", level=2)
    doc.add_p("Hi hi hey, \n and so on.")
    doc.add("That is created as a separate run.")
    doc.add(" And this run should be bold, ", bold=True)
    doc.add("while this is italics.\n", italic=True)
    doc.add("And this is shadowed, ", shadow=True)
    doc.add("superscripted, ",superscript=True)
    doc.add("and subscripted.", subscript=True)
    doc.add_p("And final paragraph.")
    doc.save()